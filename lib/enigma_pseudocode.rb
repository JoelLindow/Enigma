The ecrypting code starts with the Encryption Key and the Date Key.

The Encryption Key will be randomly generated and stored along with the message. It should also be eaily changed for the purposes of cracking messages. With the Encryption Key, the program will somehow work through the 5 digits to generate every possible 2 digit combination in sequence. The 2 digit values will be referred to as A, B, C, and D, and will be saved in a data structure that will allow them to be easily called, added to, but also remain unmanipulated. This is important for the sake of decryption and cracking.

There will be some means to generating the Date Key based on the date that the program is run. The date will be saved simply in the DDMMYY format. That number will then be squared, and the last for digits of the remainder will be stored alongside the group of 2 digit values from the Encryption Key. They will be stored as A, B, C, and D.

With 4 values from the Date Key (A, B, C, and D), and 4 values from the Encryption Key (also A, B, C, and D), they will be added to their respective counterpart to become our 4 Rotation Numbers. The generation of rotation numbers based off of the dynamic Date Key will be an important part of decryption and cracking. Creating the rotation numbers once will be the method for encryption.

The message to be encrypted will be accepted by the program either through entering a file or it will be inputed from the command line. The incoming message will be processed through a method that takes one letter at a time, and cycles through the alphabet based off of the Rotation Number. One at a time, the encrypted letter will be stored for later decryption. Once the 4 Rotation Numbers have been used in order, they will recyle starting from the first.

The decryting portion of the program will somehow recieve the date that the encryption was received on. Then the Encryption Key and Date Key will regenerate Rotation Numbers. Much like the encrypting process, the decrypting process will work through each letter, one at a time, rotating backwards through the alphabet the distance of its corresponding Rotation Number. A decrypted message will be generated one letter at a time and there will be options to (store the message in that instance of program, print the message to screen, or save the message to file.?????)

The portion of the program that cracks the message will be more complex. We will have to do some experiments with its functionality. My guess now is that it will have to test Encyption Keys, one at a time, iterating up one value. It will generate Rotation Numbers along with a stable Date??? It will generate dycrypted messages until the last 7 digits of the message are equal to '..end..'. Once that happens, we will know the Encryption Key that was used, as well as be able to read the rest of the message.
